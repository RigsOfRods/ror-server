import StringIO, os, sys

#generic stuff

class idBuffering:
	silent = False
	def buffered_spawn( self, sh, escape, cmd, args, env ):
		stderr = StringIO.StringIO()
		stdout = StringIO.StringIO()
		command_string = ''
		for i in args:
			if ( len( command_string ) ):
				command_string += ' '
			command_string += i
		try:
			retval = self.env['PSPAWN']( sh, escape, cmd, args, env,
stdout, stderr )
		except OSError, x:
			if x.errno != 10:
				raise x
			print 'OSError ignored on command: %s' % command_string
			retval = 0
		if not self.silent:
			print command_string
		if ( retval != 0 or not self.silent ):
			sys.stdout.write( stdout.getvalue() )
			sys.stderr.write( stderr.getvalue() )
		return retval

def SetupBufferedOutput( env, silent ):
	buf = idBuffering()
	buf.silent = silent
	buf.env = env
	env['SPAWN'] = buf.buffered_spawn


# color output stuff following
colours={"default":"\x1b[00m",
		"blue":   "\x1b[00;34m",
		"green":  "\x1b[00;32m",
		"red":    "\x1b[00;31m"}
#following from Python cookbook, #475186
def has_colours(stream):
	if not hasattr(stream, "isatty"):
		return False
	if not stream.isatty():
		return False # auto color only on TTYs
	try:
		import curses
		curses.setupterm()
		return curses.tigetnum("colors") > 2
	except:
		# guess false in case of error
		return False
has_colours = has_colours(sys.stdout)

# option stuff
opts = Options()
opts.AddOptions(
	EnumOption('buildtype', 'determines the build options', 'debug', ['debug', 'release', 'profile']),
	EnumOption('targetsystem', 'determines the target system', 'i386', ['i386', 'ia64', 'powerpc']),
	BoolOption('forcerebuild', 'forces rebuild', False),
	EnumOption('v', 'determines the target system', 'i386', ['i386', 'ia64', 'powerpc']),
	BoolOption('silent', 'supresses output', False),
	BoolOption('verbose', 'forces rebuild', False),
)
#print os.environ
env = Environment(options = opts, ENV = os.environ)
Help(opts.GenerateHelpText(env))

if env['targetsystem'] != 'i386':
	env['CC'] = env['targetsystem'] + "-unknown-linux-gnu-gcc"
	env['CXX'] = env['targetsystem'] + "-unknown-linux-gnu-g++"
else:
	env['CC'] = "gcc"
	env['CXX'] = "g++"

print "== Configuration ========================================================"
# set target system for autoconf
env['targetsys'] = env['targetsystem'] + "-unknown-linux-gnu"
print "Target System: " + colours['green'] + env['targetsys'] + colours['default']
print "Used compiler: " + colours['green'] + env['CXX'] + colours['default']

# quadcore:
#env['parallel'] = "5"
env['parallel'] = "1"

print "Using " + colours['green'] + env['parallel'] + " CPUs" + colours['default'] + " for parallel building"

print "Build Type: " + colours['green'] + env['buildtype'] + colours['default']

if env['forcerebuild']:
	print colours['red'] + "Enforcing rebuild of all Libraries!" + colours['default']

if env['silent']:
	print colours['red'] + "Silent Build." + colours['default']

print "========================================================================="

env.SetOption("num_jobs", int(env['parallel']))
env.SetOption("implicit_cache", True)


if env["buildtype"] == "release":
	print "\x1b[00;32mBuilding Release Build!\x1b[00m"
	env.Append(CPPFLAGS = Split("-O2 -Wall"))
elif env["buildtype"] == "profile":
	print "\x1b[00;32mBuilding Profiling Build!\x1b[00m"
	env.Append(CPPFLAGS = Split("-g -O2 -Wall -pg"))
	env.Append(LINKFLAGS = Split("-pg"))
else:
	print "\x1b[00;32mBuilding (Default) Debug Build!\x1b[00m"
	env.Append(CPPFLAGS = Split("-g -O2 -Wall"))


# beautify output...
def print_cmd_line(s, target, src, env):
	if len(src) == 1:
		sys.stdout.write(colours['green'] + " Building %s ...\n" % (' and '.join([str(x) for x in target])) + colours['red'])
	else:
		sys.stdout.write(colours['green'] + " Linking %s ...\n" % (' and '.join([str(x) for x in target]))+ colours['red'])
env['PRINT_CMD_LINE_FUNC'] = print_cmd_line

if env['silent']:
	SetupBufferedOutput(env, True)

Export('env')

env.SConscript("sconscript")
env.SConscript("SocketW/src/sconscript")

